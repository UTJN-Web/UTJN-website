# authentication/use_case/form/form_controller.py
from fastapi import APIRouter, HTTPException
from pydantic import BaseModel
from typing import Optional, List, Any, Dict
from datetime import datetime
from authentication.data_access.form_repository import FormRepository

form_router = APIRouter(prefix="/forms", tags=["forms"])

# Pydantic models
class FormFieldRequest(BaseModel):
    type: str  # "text", "textarea", "select", "radio", "checkbox", "rating", "file"
    question: str
    description: Optional[str] = None
    isRequired: bool = False
    options: Optional[List[str]] = None
    order: int = 0

class FormRequest(BaseModel):
    eventId: int
    title: str
    description: Optional[str] = None
    isActive: bool = True
    isRequired: bool = False
    fields: List[FormFieldRequest] = []

class FormResponseRequest(BaseModel):
    fieldId: int
    value: Any

class FormSubmissionRequest(BaseModel):
    formId: int
    userId: int
    responses: List[FormResponseRequest]

class CouponRequest(BaseModel):
    code: str
    name: str
    description: Optional[str] = None
    discountType: str  # "percentage" or "fixed"
    discountValue: float
    minAmount: Optional[float] = None
    maxUses: Optional[int] = None
    isActive: bool = True
    expiresAt: Optional[datetime] = None
    autoGenerated: bool = False
    triggerEventId: Optional[int] = None
    requiredSubmissions: Optional[int] = None

class CouponUsageRequest(BaseModel):
    couponCode: str
    userId: int
    eventId: int

# Form endpoints
@form_router.post("/")
async def create_form(form_data: FormRequest):
    """Create a new form for an event"""
    try:
        print(f"üìù Creating form for event {form_data.eventId}: {form_data.title}")
        
        form_repo = FormRepository()
        await form_repo.connect()
        
        try:
            form = await form_repo.create_form(form_data.dict())
            await form_repo.disconnect()
            
            return {
                "success": True,
                "message": "Form created successfully",
                "form": form
            }
        except Exception as e:
            await form_repo.disconnect()
            raise e
    except Exception as e:
        print(f"‚ùå Error creating form: {e}")
        raise HTTPException(status_code=500, detail=f"Failed to create form: {str(e)}")

@form_router.get("/event/{event_id}")
async def get_form_by_event(event_id: int):
    """Get form for a specific event"""
    try:
        print(f"üìù Getting form for event {event_id}")
        
        form_repo = FormRepository()
        await form_repo.connect()
        
        try:
            form = await form_repo.get_form_by_event_id(event_id)
            await form_repo.disconnect()
            
            if not form:
                return {
                    "success": False,
                    "message": "No form found for this event",
                    "form": None
                }
            
            return {
                "success": True,
                "form": form
            }
        except Exception as e:
            await form_repo.disconnect()
            raise e
    except Exception as e:
        print(f"‚ùå Error getting form: {e}")
        raise HTTPException(status_code=500, detail=f"Failed to get form: {str(e)}")

@form_router.put("/{form_id}")
async def update_form(form_id: int, form_data: FormRequest):
    """Update an existing form"""
    try:
        print(f"üìù Updating form {form_id}")
        
        form_repo = FormRepository()
        await form_repo.connect()
        
        try:
            form = await form_repo.update_form(form_id, form_data.dict())
            await form_repo.disconnect()
            
            return {
                "success": True,
                "message": "Form updated successfully",
                "form": form
            }
        except Exception as e:
            await form_repo.disconnect()
            raise e
    except Exception as e:
        print(f"‚ùå Error updating form: {e}")
        raise HTTPException(status_code=500, detail=f"Failed to update form: {str(e)}")

@form_router.delete("/{form_id}")
async def delete_form(form_id: int):
    """Delete a form"""
    try:
        print(f"üìù Deleting form {form_id}")
        
        form_repo = FormRepository()
        await form_repo.connect()
        
        try:
            success = await form_repo.delete_form(form_id)
            await form_repo.disconnect()
            
            if success:
                return {
                    "success": True,
                    "message": "Form deleted successfully"
                }
            else:
                return {
                    "success": False,
                    "message": "Form not found or already deleted"
                }
        except Exception as e:
            await form_repo.disconnect()
            raise e
    except Exception as e:
        print(f"‚ùå Error deleting form: {e}")
        raise HTTPException(status_code=500, detail=f"Failed to delete form: {str(e)}")

# Form submission endpoints
@form_router.post("/submit")
async def submit_form(submission_data: FormSubmissionRequest):
    """Submit a form response"""
    try:
        print(f"üìù Submitting form {submission_data.formId} by user {submission_data.userId}")
        
        form_repo = FormRepository()
        await form_repo.connect()
        
        try:
            submission = await form_repo.submit_form(submission_data.dict())
            
            # Check if this submission triggers any auto-coupons
            # Get the form to find the event ID
            form_query = 'SELECT "eventId" FROM "Form" WHERE id = $1'
            async with form_repo.pool.acquire() as conn:
                form_row = await conn.fetchrow(form_query, submission["formId"])
                if form_row:
                    generated_coupons = await form_repo.check_and_generate_auto_coupons(form_row["eventId"])
                    if generated_coupons:
                        print(f"üéüÔ∏è Generated {len(generated_coupons)} auto-coupons")
            
            await form_repo.disconnect()
            
            return {
                "success": True,
                "message": "Form submitted successfully",
                "submission": submission
            }
        except Exception as e:
            await form_repo.disconnect()
            raise e
    except Exception as e:
        print(f"‚ùå Error submitting form: {e}")
        raise HTTPException(status_code=500, detail=f"Failed to submit form: {str(e)}")

@form_router.get("/{form_id}/submissions")
async def get_form_submissions(form_id: int):
    """Get all submissions for a form"""
    try:
        print(f"üìù Getting submissions for form {form_id}")
        
        form_repo = FormRepository()
        await form_repo.connect()
        
        try:
            submissions = await form_repo.get_form_submissions(form_id)
            await form_repo.disconnect()
            
            return {
                "success": True,
                "submissions": submissions,
                "count": len(submissions)
            }
        except Exception as e:
            await form_repo.disconnect()
            raise e
    except Exception as e:
        print(f"‚ùå Error getting form submissions: {e}")
        raise HTTPException(status_code=500, detail=f"Failed to get form submissions: {str(e)}")

# Coupon endpoints
@form_router.post("/coupons")
async def create_coupon(coupon_data: CouponRequest):
    """Create a new coupon"""
    try:
        print(f"üéüÔ∏è Creating coupon: {coupon_data.code}")
        
        form_repo = FormRepository()
        await form_repo.connect()
        
        try:
            coupon = await form_repo.create_coupon(coupon_data.dict())
            await form_repo.disconnect()
            
            return {
                "success": True,
                "message": "Coupon created successfully",
                "coupon": coupon
            }
        except Exception as e:
            await form_repo.disconnect()
            raise e
    except Exception as e:
        print(f"‚ùå Error creating coupon: {e}")
        raise HTTPException(status_code=500, detail=f"Failed to create coupon: {str(e)}")

@form_router.get("/coupons")
async def get_all_coupons():
    """Get all coupons"""
    try:
        print("üéüÔ∏è Getting all coupons")
        
        form_repo = FormRepository()
        await form_repo.connect()
        
        try:
            coupons = await form_repo.get_all_coupons()
            await form_repo.disconnect()
            
            return {
                "success": True,
                "coupons": coupons,
                "count": len(coupons)
            }
        except Exception as e:
            await form_repo.disconnect()
            raise e
    except Exception as e:
        print(f"‚ùå Error getting coupons: {e}")
        raise HTTPException(status_code=500, detail=f"Failed to get coupons: {str(e)}")

@form_router.get("/coupons/{code}")
async def get_coupon_by_code(code: str):
    """Get coupon by code"""
    try:
        print(f"üéüÔ∏è Getting coupon: {code}")
        
        form_repo = FormRepository()
        await form_repo.connect()
        
        try:
            coupon = await form_repo.get_coupon_by_code(code)
            await form_repo.disconnect()
            
            if not coupon:
                raise HTTPException(status_code=404, detail="Coupon not found or inactive")
            
            return {
                "success": True,
                "coupon": coupon
            }
        except Exception as e:
            await form_repo.disconnect()
            raise e
    except Exception as e:
        print(f"‚ùå Error getting coupon: {e}")
        raise HTTPException(status_code=500, detail=f"Failed to get coupon: {str(e)}")

@form_router.post("/coupons/validate")
async def validate_coupon(usage_request: CouponUsageRequest):
    """Validate a coupon for use"""
    try:
        print(f"üéüÔ∏è Validating coupon: {usage_request.couponCode}")
        
        form_repo = FormRepository()
        await form_repo.connect()
        
        try:
            coupon = await form_repo.get_coupon_by_code(usage_request.couponCode)
            await form_repo.disconnect()
            
            if not coupon:
                return {
                    "success": False,
                    "message": "Coupon not found or inactive",
                    "valid": False
                }
            
            # Check expiration
            if coupon["expiresAt"] and datetime.now() > coupon["expiresAt"]:
                return {
                    "success": False,
                    "message": "Coupon has expired",
                    "valid": False
                }
            
            # Check usage limits
            if coupon["maxUses"] and coupon["currentUses"] >= coupon["maxUses"]:
                return {
                    "success": False,
                    "message": "Coupon usage limit reached",
                    "valid": False
                }
            
            return {
                "success": True,
                "message": "Coupon is valid",
                "valid": True,
                "coupon": coupon
            }
        except Exception as e:
            await form_repo.disconnect()
            raise e
    except Exception as e:
        print(f"‚ùå Error validating coupon: {e}")
        raise HTTPException(status_code=500, detail=f"Failed to validate coupon: {str(e)}")

@form_router.post("/coupons/use")
async def use_coupon(usage_request: CouponUsageRequest):
    """Use a coupon (record usage)"""
    try:
        print(f"üéüÔ∏è Using coupon: {usage_request.couponCode}")
        
        form_repo = FormRepository()
        await form_repo.connect()
        
        try:
            # First validate the coupon
            coupon = await form_repo.get_coupon_by_code(usage_request.couponCode)
            if not coupon:
                await form_repo.disconnect()
                raise HTTPException(status_code=404, detail="Coupon not found or inactive")
            
            # Calculate discount amount (this would be calculated on frontend based on event price)
            # For now, we'll just record the usage
            usage_data = {
                "couponId": coupon["id"],
                "userId": usage_request.userId,
                "eventId": usage_request.eventId,
                "discountAmount": 0  # This should be calculated based on actual event price
            }
            
            usage = await form_repo.use_coupon(usage_data)
            await form_repo.disconnect()
            
            return {
                "success": True,
                "message": "Coupon used successfully",
                "usage": usage
            }
        except Exception as e:
            await form_repo.disconnect()
            raise e
    except Exception as e:
        print(f"‚ùå Error using coupon: {e}")
        raise HTTPException(status_code=500, detail=f"Failed to use coupon: {str(e)}")

@form_router.post("/coupons/auto-generate/{event_id}")
async def trigger_auto_coupon_generation(event_id: int):
    """Manually trigger auto-coupon generation for an event"""
    try:
        print(f"üéüÔ∏è Triggering auto-coupon generation for event {event_id}")
        
        form_repo = FormRepository()
        await form_repo.connect()
        
        try:
            generated_coupons = await form_repo.check_and_generate_auto_coupons(event_id)
            await form_repo.disconnect()
            
            return {
                "success": True,
                "message": f"Generated {len(generated_coupons)} coupons",
                "generatedCoupons": generated_coupons,
                "count": len(generated_coupons)
            }
        except Exception as e:
            await form_repo.disconnect()
            raise e
    except Exception as e:
        print(f"‚ùå Error generating auto-coupons: {e}")
        raise HTTPException(status_code=500, detail=f"Failed to generate auto-coupons: {str(e)}") 