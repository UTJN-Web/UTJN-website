'use client';

import { useState, useEffect } from 'react';
import { Plus, Edit, Trash2, Eye, FileText, Settings, BarChart3, Ticket, Save, X, ArrowDown, ArrowUp } from 'lucide-react';

interface FormField {
  id?: number;
  type: string;
  question: string;
  description?: string;
  isRequired: boolean;
  options?: string[];
  order: number;
}

interface Form {
  id: number;
  eventId: number;
  title: string;
  description?: string;
  isActive: boolean;
  isRequired: boolean;
  fields: FormField[];
  createdAt: string;
  updatedAt: string;
}

interface Event {
  id: number;
  name: string;
  type: string;
  date: string;
  isArchived: boolean;
}

interface Coupon {
  id: number;
  code: string;
  name: string;
  description?: string;
  discountType: string;
  discountValue: number;
  minAmount?: number;
  maxUses?: number;
  currentUses: number;
  isActive: boolean;
  expiresAt?: string;
  autoGenerated: boolean;
  triggerEventId?: number;
  triggerEventName?: string;
  requiredSubmissions?: number;
  createdAt: string;
}

const FIELD_TYPES = [
  { value: 'text', label: 'Short Text', icon: 'üìù' },
  { value: 'textarea', label: 'Long Text', icon: 'üìÑ' },
  { value: 'select', label: 'Dropdown', icon: 'üîΩ' },
  { value: 'radio', label: 'Multiple Choice', icon: '‚ö™' },
  { value: 'checkbox', label: 'Checkboxes', icon: '‚òëÔ∏è' },
  { value: 'rating', label: 'Rating Scale', icon: '‚≠ê' },
  { value: 'file', label: 'File Upload', icon: 'üìé' }
];

export default function AdminFormsPage() {
  const [activeTab, setActiveTab] = useState<'forms' | 'coupons'>('forms');
  const [events, setEvents] = useState<Event[]>([]);
  const [forms, setForms] = useState<Form[]>([]);
  const [coupons, setCoupons] = useState<Coupon[]>([]);
  const [loading, setLoading] = useState(true);
  
  // Form designer state
  const [showFormDesigner, setShowFormDesigner] = useState(false);
  const [selectedEvent, setSelectedEvent] = useState<Event | null>(null);
  const [currentForm, setCurrentForm] = useState<Form | null>(null);
  const [formTitle, setFormTitle] = useState('');
  const [formDescription, setFormDescription] = useState('');
  const [formIsRequired, setFormIsRequired] = useState(false);
  const [formFields, setFormFields] = useState<FormField[]>([]);
  
  // Coupon designer state
  const [showCouponDesigner, setShowCouponDesigner] = useState(false);
  const [couponData, setCouponData] = useState({
    code: '',
    name: '',
    description: '',
    discountType: 'percentage',
    discountValue: 0,
    minAmount: 0,
    maxUses: 1,
    expiresAt: '',
    autoGenerated: false,
    triggerEventId: 0,
    requiredSubmissions: 1
  });

  useEffect(() => {
    fetchData();
  }, []);

  const fetchData = async () => {
    try {
      const [eventsRes, couponsRes] = await Promise.all([
        fetch('/api/events'),
        fetch('/api/forms')  // This gets coupons based on our current route setup
      ]);

      if (eventsRes.ok) {
        const eventsData = await eventsRes.json();
        setEvents(eventsData);
        
        // Fetch forms for each event
        const formsPromises = eventsData.map((event: Event) =>
          fetch(`/api/forms/${event.id}`).then(res => res.ok ? res.json() : null)
        );
        const formsResults = await Promise.all(formsPromises);
        const validForms = formsResults.filter(result => result?.success && result.form).map(result => result.form);
        setForms(validForms);
      }

      if (couponsRes.ok) {
        const couponsData = await couponsRes.json();
        if (couponsData.success) {
          setCoupons(couponsData.coupons || []);
        }
      }
    } catch (error) {
      console.error('Error fetching data:', error);
    } finally {
      setLoading(false);
    }
  };

  const openFormDesigner = (event: Event, form?: Form) => {
    setSelectedEvent(event);
    setCurrentForm(form || null);
    
    if (form) {
      setFormTitle(form.title);
      setFormDescription(form.description || '');
      setFormIsRequired(form.isRequired);
      setFormFields(form.fields || []);
    } else {
      setFormTitle(`${event.name} Feedback Form`);
      setFormDescription(`Please provide your feedback for ${event.name}`);
      setFormIsRequired(false);
      setFormFields([]);
    }
    
    setShowFormDesigner(true);
  };

  const addFormField = () => {
    const newField: FormField = {
      type: 'text',
      question: '',
      description: '',
      isRequired: false,
      options: [],
      order: formFields.length
    };
    setFormFields([...formFields, newField]);
  };

  const updateFormField = (index: number, field: Partial<FormField>) => {
    const updatedFields = [...formFields];
    updatedFields[index] = { ...updatedFields[index], ...field };
    setFormFields(updatedFields);
  };

  const removeFormField = (index: number) => {
    const updatedFields = formFields.filter((_, i) => i !== index);
    setFormFields(updatedFields.map((field, i) => ({ ...field, order: i })));
  };

  const moveFieldUp = (index: number) => {
    if (index === 0) return;
    const updatedFields = [...formFields];
    [updatedFields[index - 1], updatedFields[index]] = [updatedFields[index], updatedFields[index - 1]];
    setFormFields(updatedFields.map((field, i) => ({ ...field, order: i })));
  };

  const moveFieldDown = (index: number) => {
    if (index === formFields.length - 1) return;
    const updatedFields = [...formFields];
    [updatedFields[index], updatedFields[index + 1]] = [updatedFields[index + 1], updatedFields[index]];
    setFormFields(updatedFields.map((field, i) => ({ ...field, order: i })));
  };

  const saveForm = async () => {
    if (!selectedEvent) return;

    try {
      const formData = {
        eventId: selectedEvent.id,
        title: formTitle,
        description: formDescription,
        isRequired: formIsRequired,
        fields: formFields
      };

      const url = currentForm ? `/api/forms/${currentForm.id}` : '/api/forms';
      const method = currentForm ? 'PUT' : 'POST';

      const response = await fetch(url, {
        method,
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(formData)
      });

      if (response.ok) {
        setShowFormDesigner(false);
        fetchData(); // Refresh data
      } else {
        console.error('Failed to save form');
      }
    } catch (error) {
      console.error('Error saving form:', error);
    }
  };

  const deleteForm = async (formId: number) => {
    if (!confirm('Are you sure you want to delete this form?')) return;

    try {
      const response = await fetch(`/api/forms/${formId}`, {
        method: 'DELETE'
      });

      if (response.ok) {
        fetchData(); // Refresh data
      }
    } catch (error) {
      console.error('Error deleting form:', error);
    }
  };

  const saveCoupon = async () => {
    try {
      const response = await fetch('/api/forms', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          ...couponData,
          triggerEventId: couponData.triggerEventId || null
        })
      });

      if (response.ok) {
        setShowCouponDesigner(false);
        setCouponData({
          code: '',
          name: '',
          description: '',
          discountType: 'percentage',
          discountValue: 0,
          minAmount: 0,
          maxUses: 1,
          expiresAt: '',
          autoGenerated: false,
          triggerEventId: 0,
          requiredSubmissions: 1
        });
        fetchData(); // Refresh data
      }
    } catch (error) {
      console.error('Error saving coupon:', error);
    }
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto"></div>
          <p className="mt-4 text-gray-600">Loading forms...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-gray-900">Forms & Coupons</h1>
          <p className="text-gray-600 mt-2">Design event forms, manage submissions, and create discount coupons</p>
        </div>

        {/* Tab Navigation */}
        <div className="mb-6">
          <div className="border-b border-gray-200">
            <nav className="-mb-px flex space-x-8">
              <button
                onClick={() => setActiveTab('forms')}
                className={`py-2 px-1 border-b-2 font-medium text-sm ${
                  activeTab === 'forms'
                    ? 'border-purple-500 text-purple-600'
                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                }`}
              >
                <FileText className="w-5 h-5 inline mr-2" />
                Event Forms
              </button>
              <button
                onClick={() => setActiveTab('coupons')}
                className={`py-2 px-1 border-b-2 font-medium text-sm ${
                  activeTab === 'coupons'
                    ? 'border-purple-500 text-purple-600'
                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                }`}
              >
                <Ticket className="w-5 h-5 inline mr-2" />
                Discount Coupons
              </button>
            </nav>
          </div>
        </div>

        {/* Forms Tab */}
        {activeTab === 'forms' && (
          <div className="space-y-6">
            <div className="bg-white rounded-lg shadow">
              <div className="px-6 py-4 border-b border-gray-200">
                <h2 className="text-lg font-semibold text-gray-900">Event Forms</h2>
                <p className="text-sm text-gray-600">Create and manage feedback forms for your events</p>
              </div>
              
              <div className="p-6">
                <div className="grid gap-4">
                  {events.map((event) => {
                    const eventForm = forms.find(f => f.eventId === event.id);
                    return (
                      <div key={event.id} className="border rounded-lg p-4 hover:bg-gray-50">
                        <div className="flex items-center justify-between">
                          <div className="flex-1">
                            <h3 className="font-medium text-gray-900">{event.name}</h3>
                            <p className="text-sm text-gray-500">
                              {event.type} ‚Ä¢ {new Date(event.date).toLocaleDateString()}
                              {event.isArchived && <span className="ml-2 text-amber-600">(Archived)</span>}
                            </p>
                            {eventForm && (
                              <p className="text-sm text-green-600 mt-1">
                                ‚úì Form: {eventForm.title} ({eventForm.fields.length} fields)
                              </p>
                            )}
                          </div>
                          <div className="flex items-center gap-2">
                            <button
                              onClick={() => openFormDesigner(event, eventForm)}
                              className="p-2 text-blue-600 hover:bg-blue-50 rounded"
                              title={eventForm ? 'Edit Form' : 'Create Form'}
                            >
                              {eventForm ? <Edit className="w-4 h-4" /> : <Plus className="w-4 h-4" />}
                            </button>
                            {eventForm && (
                              <>
                                <button
                                  onClick={() => {/* TODO: View submissions */}}
                                  className="p-2 text-green-600 hover:bg-green-50 rounded"
                                  title="View Submissions"
                                >
                                  <Eye className="w-4 h-4" />
                                </button>
                                <button
                                  onClick={() => deleteForm(eventForm.id)}
                                  className="p-2 text-red-600 hover:bg-red-50 rounded"
                                  title="Delete Form"
                                >
                                  <Trash2 className="w-4 h-4" />
                                </button>
                              </>
                            )}
                          </div>
                        </div>
                      </div>
                    );
                  })}
                </div>
              </div>
            </div>
          </div>
        )}

        {/* Coupons Tab */}
        {activeTab === 'coupons' && (
          <div className="space-y-6">
            <div className="bg-white rounded-lg shadow">
              <div className="px-6 py-4 border-b border-gray-200 flex items-center justify-between">
                <div>
                  <h2 className="text-lg font-semibold text-gray-900">Discount Coupons</h2>
                  <p className="text-sm text-gray-600">Manage discount coupons and auto-generation rules</p>
                </div>
                <button
                  onClick={() => setShowCouponDesigner(true)}
                  className="px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 flex items-center gap-2"
                >
                  <Plus className="w-4 h-4" />
                  Create Coupon
                </button>
              </div>
              
              <div className="p-6">
                <div className="grid gap-4">
                  {coupons.map((coupon) => (
                    <div key={coupon.id} className="border rounded-lg p-4">
                      <div className="flex items-center justify-between">
                        <div className="flex-1">
                          <div className="flex items-center gap-3">
                            <h3 className="font-medium text-gray-900">{coupon.name}</h3>
                            <span className="px-2 py-1 bg-gray-100 text-gray-700 rounded text-sm font-mono">
                              {coupon.code}
                            </span>
                            {coupon.autoGenerated && (
                              <span className="px-2 py-1 bg-blue-100 text-blue-700 rounded text-xs">
                                Auto-Generated
                              </span>
                            )}
                            {!coupon.isActive && (
                              <span className="px-2 py-1 bg-red-100 text-red-700 rounded text-xs">
                                Inactive
                              </span>
                            )}
                          </div>
                          <p className="text-sm text-gray-600 mt-1">
                            {coupon.discountType === 'percentage' ? `${coupon.discountValue}% off` : `$${coupon.discountValue} off`}
                            {coupon.minAmount && ` (min $${coupon.minAmount})`}
                            ‚Ä¢ Used {coupon.currentUses}/{coupon.maxUses || '‚àû'} times
                          </p>
                          {coupon.triggerEventName && (
                            <p className="text-sm text-purple-600 mt-1">
                              üéØ Triggered by: {coupon.triggerEventName} ({coupon.requiredSubmissions} submissions)
                            </p>
                          )}
                        </div>
                        <div className="text-sm text-gray-500">
                          {coupon.expiresAt ? `Expires ${new Date(coupon.expiresAt).toLocaleDateString()}` : 'No expiration'}
                        </div>
                      </div>
                    </div>
                  ))}
                  {coupons.length === 0 && (
                    <div className="text-center py-8 text-gray-500">
                      <Ticket className="w-12 h-12 mx-auto mb-4 text-gray-300" />
                      <p>No coupons created yet</p>
                      <p className="text-sm">Create your first discount coupon to get started</p>
                    </div>
                  )}
                </div>
              </div>
            </div>
          </div>
        )}

        {/* Form Designer Modal */}
        {showFormDesigner && (
          <div className="fixed inset-0 bg-black/20 backdrop-blur-sm flex items-center justify-center z-50 p-4">
            <div className="bg-white rounded-2xl max-w-4xl w-full max-h-[90vh] overflow-y-auto shadow-2xl border border-gray-200">
              <div className="sticky top-0 bg-white border-b border-gray-100 px-6 py-4 flex items-center justify-between rounded-t-2xl">
                <h3 className="text-lg font-medium text-gray-900">
                  {currentForm ? 'Edit Form' : 'Create Form'} - {selectedEvent?.name}
                </h3>
                <button
                  onClick={() => setShowFormDesigner(false)}
                  className="p-2 hover:bg-gray-100 rounded-full transition-colors"
                >
                  <X className="w-5 h-5 text-gray-500" />
                </button>
              </div>
              
              <div className="p-6 space-y-6 bg-gray-50">
                {/* Form Basic Info */}
                <div className="bg-white rounded-lg p-6 space-y-4 border border-gray-200 shadow-sm">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">Form Title</label>
                    <input
                      type="text"
                      value={formTitle}
                      onChange={(e) => setFormTitle(e.target.value)}
                      className="w-full border-0 border-b-2 border-gray-200 focus:border-blue-500 bg-transparent px-0 py-2 text-lg focus:outline-none focus:ring-0"
                      placeholder="Enter form title"
                    />
                  </div>
                  
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">Description</label>
                    <textarea
                      value={formDescription}
                      onChange={(e) => setFormDescription(e.target.value)}
                      className="w-full border-0 border-b border-gray-200 focus:border-blue-500 bg-transparent px-0 py-2 resize-none focus:outline-none focus:ring-0"
                      placeholder="Enter form description"
                      rows={2}
                    />
                  </div>
                  
                  <label className="flex items-center gap-3 mt-4">
                    <input
                      type="checkbox"
                      checked={formIsRequired}
                      onChange={(e) => setFormIsRequired(e.target.checked)}
                      className="w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
                    />
                    <span className="text-sm text-gray-600">Required for event completion</span>
                  </label>
                </div>

                {/* Form Fields */}
                <div className="space-y-4">
                  <div className="flex items-center justify-between">
                    <h4 className="text-lg font-medium text-gray-900">Form Fields</h4>
                    <button
                      onClick={addFormField}
                      className="px-4 py-2 bg-blue-600 text-white rounded-full text-sm hover:bg-blue-700 flex items-center gap-2 transition-colors shadow-sm"
                    >
                      <Plus className="w-4 h-4" />
                      Add Field
                    </button>
                  </div>

                  {formFields.map((field, index) => (
                    <div key={index} className="bg-white border border-gray-200 rounded-lg p-6 space-y-4 shadow-sm hover:shadow-md transition-shadow">
                      <div className="flex items-center justify-between">
                        <div className="flex items-center gap-3">
                          <span className="w-6 h-6 bg-blue-100 text-blue-600 rounded-full text-xs font-medium flex items-center justify-center">
                            {index + 1}
                          </span>
                          <select
                            value={field.type}
                            onChange={(e) => updateFormField(index, { type: e.target.value })}
                            className="border border-gray-300 rounded-lg px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                          >
                            {FIELD_TYPES.map(type => (
                              <option key={type.value} value={type.value}>
                                {type.icon} {type.label}
                              </option>
                            ))}
                          </select>
                        </div>
                        <div className="flex items-center gap-1">
                          <button
                            onClick={() => moveFieldUp(index)}
                            disabled={index === 0}
                            className="p-2 text-gray-400 hover:text-gray-600 hover:bg-gray-100 rounded-full disabled:opacity-30 transition-colors"
                          >
                            <ArrowUp className="w-4 h-4" />
                          </button>
                          <button
                            onClick={() => moveFieldDown(index)}
                            disabled={index === formFields.length - 1}
                            className="p-2 text-gray-400 hover:text-gray-600 hover:bg-gray-100 rounded-full disabled:opacity-30 transition-colors"
                          >
                            <ArrowDown className="w-4 h-4" />
                          </button>
                          <button
                            onClick={() => removeFormField(index)}
                            className="p-2 text-red-500 hover:text-red-700 hover:bg-red-50 rounded-full transition-colors"
                          >
                            <Trash2 className="w-4 h-4" />
                          </button>
                        </div>
                      </div>

                      <div className="grid grid-cols-2 gap-4">
                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-1">Question</label>
                          <input
                            type="text"
                            value={field.question}
                            onChange={(e) => updateFormField(index, { question: e.target.value })}
                            className="w-full border-0 border-b-2 border-gray-200 focus:border-blue-500 bg-transparent px-0 py-2 text-sm focus:outline-none focus:ring-0"
                            placeholder="Enter question"
                          />
                        </div>
                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-1">Description (optional)</label>
                          <input
                            type="text"
                            value={field.description || ''}
                            onChange={(e) => updateFormField(index, { description: e.target.value })}
                            className="w-full border-0 border-b-2 border-gray-200 focus:border-blue-500 bg-transparent px-0 py-2 text-sm focus:outline-none focus:ring-0"
                            placeholder="Help text"
                          />
                        </div>
                      </div>

                      {(field.type === 'select' || field.type === 'radio' || field.type === 'checkbox') && (
                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-1">Options (one per line)</label>
                          <textarea
                            value={(field.options || []).join('\n')}
                            onChange={(e) => updateFormField(index, { 
                              options: e.target.value.split('\n').filter(opt => opt.trim()) 
                            })}
                            className="w-full border border-gray-300 rounded-lg px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent resize-none"
                            placeholder="Option 1&#10;Option 2&#10;Option 3"
                            rows={3}
                          />
                        </div>
                      )}

                      <label className="flex items-center gap-3">
                        <input
                          type="checkbox"
                          checked={field.isRequired}
                          onChange={(e) => updateFormField(index, { isRequired: e.target.checked })}
                          className="w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
                        />
                        <span className="text-sm text-gray-600">Required field</span>
                      </label>
                    </div>
                  ))}

                  {formFields.length === 0 && (
                    <div className="text-center py-12 text-gray-500 bg-white border-2 border-dashed border-gray-200 rounded-lg">
                      <FileText className="w-12 h-12 mx-auto mb-4 text-gray-300" />
                      <p className="text-lg font-medium mb-1">No fields added yet</p>
                      <p className="text-sm text-gray-400">Click "Add Field" to start building your form</p>
                    </div>
                  )}
                </div>

                {/* Actions */}
                <div className="flex items-center justify-end gap-3 pt-6 border-t border-gray-200 bg-white px-6 py-4 rounded-b-2xl">
                  <button
                    onClick={() => setShowFormDesigner(false)}
                    className="px-6 py-2 text-gray-600 hover:bg-gray-100 rounded-lg transition-colors"
                  >
                    Cancel
                  </button>
                  <button
                    onClick={saveForm}
                    disabled={!formTitle || formFields.length === 0}
                    className="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed flex items-center gap-2 transition-colors shadow-sm"
                  >
                    <Save className="w-4 h-4" />
                    {currentForm ? 'Update Form' : 'Create Form'}
                  </button>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* Coupon Designer Modal */}
        {showCouponDesigner && (
          <div className="fixed inset-0 bg-black/20 backdrop-blur-sm flex items-center justify-center z-50 p-4">
            <div className="bg-white rounded-2xl max-w-2xl w-full max-h-[90vh] overflow-y-auto shadow-2xl border border-gray-200">
              <div className="sticky top-0 bg-white border-b border-gray-100 px-6 py-4 flex items-center justify-between rounded-t-2xl">
                <h3 className="text-lg font-medium text-gray-900">Create Discount Coupon</h3>
                <button
                  onClick={() => setShowCouponDesigner(false)}
                  className="p-2 hover:bg-gray-100 rounded-full transition-colors"
                >
                  <X className="w-5 h-5 text-gray-500" />
                </button>
              </div>
              
              <div className="p-6 space-y-6 bg-gray-50">
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">Coupon Code</label>
                    <input
                      type="text"
                      value={couponData.code}
                      onChange={(e) => setCouponData({...couponData, code: e.target.value.toUpperCase()})}
                      className="w-full border rounded-lg px-3 py-2 font-mono"
                      placeholder="DISCOUNT10"
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">Coupon Name</label>
                    <input
                      type="text"
                      value={couponData.name}
                      onChange={(e) => setCouponData({...couponData, name: e.target.value})}
                      className="w-full border rounded-lg px-3 py-2"
                      placeholder="10% Off Discount"
                    />
                  </div>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Description</label>
                  <textarea
                    value={couponData.description}
                    onChange={(e) => setCouponData({...couponData, description: e.target.value})}
                    className="w-full border rounded-lg px-3 py-2 h-20"
                    placeholder="Enter coupon description"
                  />
                </div>

                <div className="grid grid-cols-3 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">Discount Type</label>
                    <select
                      value={couponData.discountType}
                      onChange={(e) => setCouponData({...couponData, discountType: e.target.value})}
                      className="w-full border rounded-lg px-3 py-2"
                    >
                      <option value="percentage">Percentage</option>
                      <option value="fixed">Fixed Amount</option>
                    </select>
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      {couponData.discountType === 'percentage' ? 'Percentage (%)' : 'Amount ($)'}
                    </label>
                    <input
                      type="number"
                      value={couponData.discountValue}
                      onChange={(e) => setCouponData({...couponData, discountValue: parseFloat(e.target.value) || 0})}
                      className="w-full border rounded-lg px-3 py-2"
                      min="0"
                      max={couponData.discountType === 'percentage' ? "100" : undefined}
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">Min Amount ($)</label>
                    <input
                      type="number"
                      value={couponData.minAmount}
                      onChange={(e) => setCouponData({...couponData, minAmount: parseFloat(e.target.value) || 0})}
                      className="w-full border rounded-lg px-3 py-2"
                      min="0"
                    />
                  </div>
                </div>

                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">Max Uses</label>
                    <input
                      type="number"
                      value={couponData.maxUses}
                      onChange={(e) => setCouponData({...couponData, maxUses: parseInt(e.target.value) || 1})}
                      className="w-full border rounded-lg px-3 py-2"
                      min="1"
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">Expires At</label>
                    <input
                      type="datetime-local"
                      value={couponData.expiresAt}
                      onChange={(e) => setCouponData({...couponData, expiresAt: e.target.value})}
                      className="w-full border rounded-lg px-3 py-2"
                    />
                  </div>
                </div>

                <div className="space-y-3">
                  <label className="flex items-center gap-2">
                    <input
                      type="checkbox"
                      checked={couponData.autoGenerated}
                      onChange={(e) => setCouponData({...couponData, autoGenerated: e.target.checked})}
                    />
                    <span className="text-sm text-gray-700">Auto-generate for form submissions</span>
                  </label>

                  {couponData.autoGenerated && (
                    <div className="ml-6 space-y-3 p-3 bg-blue-50 rounded">
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">Trigger Event</label>
                        <select
                          value={couponData.triggerEventId}
                          onChange={(e) => setCouponData({...couponData, triggerEventId: parseInt(e.target.value) || 0})}
                          className="w-full border rounded-lg px-3 py-2"
                        >
                          <option value="">Select event...</option>
                          {events.map(event => (
                            <option key={event.id} value={event.id}>{event.name}</option>
                          ))}
                        </select>
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">Required Submissions</label>
                        <input
                          type="number"
                          value={couponData.requiredSubmissions}
                          onChange={(e) => setCouponData({...couponData, requiredSubmissions: parseInt(e.target.value) || 1})}
                          className="w-full border rounded-lg px-3 py-2"
                          min="1"
                        />
                        <p className="text-xs text-gray-500 mt-1">
                          Number of form submissions needed to trigger coupon generation
                        </p>
                      </div>
                    </div>
                  )}
                </div>

                {/* Actions */}
                <div className="flex items-center justify-end gap-3 pt-6 border-t border-gray-200 bg-white px-6 py-4 rounded-b-2xl">
                  <button
                    onClick={() => setShowCouponDesigner(false)}
                    className="px-6 py-2 text-gray-600 hover:bg-gray-100 rounded-lg transition-colors"
                  >
                    Cancel
                  </button>
                  <button
                    onClick={saveCoupon}
                    disabled={!couponData.code || !couponData.name}
                    className="px-6 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 disabled:opacity-50 disabled:cursor-not-allowed flex items-center gap-2 transition-colors shadow-sm"
                  >
                    <Save className="w-4 h-4" />
                    Create Coupon
                  </button>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
} 