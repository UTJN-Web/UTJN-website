'use client';

import { useState, useEffect, useContext } from 'react';
import { UserContext } from '@/app/contexts/UserContext';
import { Ticket, User, Calendar, Copy, CheckCircle, CreditCard, TrendingUp } from 'lucide-react';

interface Coupon {
  id: number;
  code: string;
  name: string;
  description?: string;
  discountType: string;
  discountValue: number;
  minAmount?: number;
  maxUses?: number;
  currentUses: number;
  isActive: boolean;
  expiresAt?: string;
  autoGenerated: boolean;
}

interface CreditInfo {
  currentCredits: number;
  totalEarned: number;
}

interface CreditTransaction {
  id: number;
  type: string;
  amount: number;
  description: string;
  createdAt: string;
  form_title?: string;
  event_name?: string;
}

export default function ProfilePage() {
  const userContext = useContext(UserContext);
  const user = userContext?.user;
  const [coupons, setCoupons] = useState<Coupon[]>([]);
  const [credits, setCredits] = useState<CreditInfo>({ currentCredits: 0, totalEarned: 0 });
  const [creditHistory, setCreditHistory] = useState<CreditTransaction[]>([]);
  const [loading, setLoading] = useState(true);
  const [copiedCode, setCopiedCode] = useState<string | null>(null);

  useEffect(() => {
    if (user?.id) {
      fetchUserCoupons();
      fetchUserCredits();
      fetchCreditHistory();
    }
  }, [user]);

  const fetchUserCoupons = async () => {
    try {
      const response = await fetch(`/api/users/coupons?userId=${user?.id}`);
      if (response.ok) {
        const data = await response.json();
        if (data.success) {
          setCoupons(data.coupons || []);
        }
      }
    } catch (error) {
      console.error('Error fetching coupons:', error);
    } finally {
      setLoading(false);
    }
  };

  const fetchUserCredits = async () => {
    try {
      const response = await fetch(`/api/users/credits?userId=${user?.id}`);
      if (response.ok) {
        const data = await response.json();
        if (data.success) {
          setCredits(data.credits);
        }
      }
    } catch (error) {
      console.error('Error fetching credits:', error);
    }
  };

  const fetchCreditHistory = async () => {
    try {
      const response = await fetch(`/api/users/credit-history?userId=${user?.id}`);
      if (response.ok) {
        const data = await response.json();
        if (data.success) {
          setCreditHistory(data.history || []);
        }
      }
    } catch (error) {
      console.error('Error fetching credit history:', error);
    }
  };

  const copyToClipboard = async (code: string) => {
    try {
      await navigator.clipboard.writeText(code);
      setCopiedCode(code);
      setTimeout(() => setCopiedCode(null), 2000);
    } catch (error) {
      console.error('Failed to copy code:', error);
    }
  };

  if (!user) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <User className="w-12 h-12 mx-auto mb-4 text-gray-400" />
          <h2 className="text-xl font-semibold text-gray-900 mb-2">Please Login</h2>
          <p className="text-gray-600">You need to be logged in to view your profile.</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
        {/* Header */}
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-gray-900">My Profile</h1>
          <p className="text-gray-600 mt-2">Manage your account and view your benefits</p>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* User Info */}
          <div className="bg-white rounded-lg shadow-sm border p-6 mb-6">
            <div className="flex items-center gap-4 mb-4">
              <User className="w-12 h-12 text-blue-600" />
              <div>
                <h2 className="text-xl font-semibold text-gray-900">
                  {user?.firstName} {user?.lastName}
                </h2>
                <p className="text-gray-600">{user?.email}</p>
              </div>
            </div>
            
            <div className="grid grid-cols-2 gap-4 text-sm text-gray-600">
              <div>
                <strong>Major:</strong> {user?.major}
              </div>
              <div>
                <strong>Graduation Year:</strong> {user?.graduationYear}
              </div>
              <div>
                <strong>Current Year:</strong> {(user as any)?.currentYear || 'Not specified'}
              </div>
              <div>
                <strong>University:</strong> {(user as any)?.university || 'University of Toronto'}
              </div>
            </div>
          </div>

          {/* Credit Balance */}
          <div className="bg-gradient-to-r from-green-50 to-emerald-50 border border-green-200 rounded-lg p-6 mb-6">
            <div className="flex items-center gap-4 mb-4">
              <CreditCard className="w-8 h-8 text-green-600" />
              <div>
                <h3 className="text-xl font-semibold text-green-900">Credit Balance</h3>
                <p className="text-green-700">Use credits for event discounts</p>
              </div>
            </div>
            
            <div className="grid grid-cols-2 gap-6">
              <div className="bg-white rounded-lg p-4 border border-green-200">
                <div className="text-center">
                  <div className="text-3xl font-bold text-green-600">${credits.currentCredits}</div>
                  <div className="text-sm text-gray-600">Available Credits</div>
                  <div className="text-xs text-gray-500 mt-1">
                    {credits.currentCredits} credit{credits.currentCredits !== 1 ? 's' : ''} â€¢ 1 credit = $1 USD
                  </div>
                </div>
              </div>
              
              <div className="bg-white rounded-lg p-4 border border-green-200">
                <div className="text-center">
                  <div className="text-2xl font-bold text-gray-700">${credits.totalEarned}</div>
                  <div className="text-sm text-gray-600">Total Earned</div>
                  <div className="text-xs text-gray-500 mt-1 flex items-center justify-center gap-1">
                    <TrendingUp className="w-3 h-3" />
                    Lifetime earnings
                  </div>
                </div>
              </div>
            </div>
            
            {credits.currentCredits > 0 && (
              <div className="mt-4 p-3 bg-green-100 rounded-lg">
                <p className="text-sm text-green-800 text-center">
                  ðŸ’¡ <strong>Tip:</strong> Use your credits when registering for paid events to get instant discounts!
                </p>
              </div>
            )}
          </div>

          {/* Credit History */}
          {creditHistory.length > 0 && (
            <div className="bg-white rounded-lg shadow-sm border p-6 mb-6">
              <h3 className="text-lg font-semibold text-gray-900 mb-4">Recent Credit Activity</h3>
              
              <div className="space-y-3">
                {creditHistory.map((transaction) => (
                  <div key={transaction.id} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                    <div className="flex items-center gap-3">
                      <div className={`w-8 h-8 rounded-full flex items-center justify-center ${
                        transaction.type === 'earned' 
                          ? 'bg-green-100 text-green-600' 
                          : 'bg-red-100 text-red-600'
                      }`}>
                        {transaction.type === 'earned' ? '+' : '-'}
                      </div>
                      <div>
                        <div className="font-medium text-gray-900">{transaction.description}</div>
                        {transaction.form_title && (
                          <div className="text-sm text-gray-600">Form: {transaction.form_title}</div>
                        )}
                        {transaction.event_name && (
                          <div className="text-sm text-gray-600">Event: {transaction.event_name}</div>
                        )}
                        <div className="text-xs text-gray-500">
                          {new Date(transaction.createdAt).toLocaleDateString('en-US', {
                            year: 'numeric',
                            month: 'short',
                            day: 'numeric',
                            hour: '2-digit',
                            minute: '2-digit'
                          })}
                        </div>
                      </div>
                    </div>
                    <div className={`text-lg font-semibold ${
                      transaction.type === 'earned' ? 'text-green-600' : 'text-red-600'
                    }`}>
                      {transaction.type === 'earned' ? '+' : '-'}${transaction.amount}
                    </div>
                  </div>
                ))}
              </div>
            </div>
          )}

          {/* Coupons Section */}
          <div className="lg:col-span-2">
            <div className="bg-white rounded-lg shadow">
              <div className="px-6 py-4 border-b border-gray-200">
                <div className="flex items-center">
                  <Ticket className="w-5 h-5 text-purple-600 mr-2" />
                  <h2 className="text-lg font-semibold text-gray-900">My Discount Coupons</h2>
                </div>
                <p className="text-sm text-gray-600 mt-1">
                  Earned from event participation and feedback
                </p>
              </div>
              
              <div className="p-6">
                {loading ? (
                  <div className="text-center py-8">
                    <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-purple-600 mx-auto"></div>
                    <p className="mt-2 text-gray-600">Loading coupons...</p>
                  </div>
                ) : coupons.length === 0 ? (
                  <div className="text-center py-12">
                    <Ticket className="w-12 h-12 mx-auto mb-4 text-gray-300" />
                    <h3 className="text-lg font-medium text-gray-900 mb-2">No Coupons Yet</h3>
                    <p className="text-gray-600 mb-4">
                      Participate in events and fill out feedback forms to earn discount coupons!
                    </p>
                    <a
                      href="/events"
                      className="inline-flex items-center gap-2 px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700"
                    >
                      <Calendar className="w-4 h-4" />
                      Browse Events
                    </a>
                  </div>
                ) : (
                  <div className="space-y-4">
                    {coupons.map((coupon) => {
                                             const isExpired = coupon.expiresAt ? new Date(coupon.expiresAt) < new Date() : false;
                      const isUsedUp = coupon.maxUses && coupon.currentUses >= coupon.maxUses;
                      const isAvailable = coupon.isActive && !isExpired && !isUsedUp;
                      
                      return (
                        <div
                          key={coupon.id}
                          className={`border rounded-lg p-4 ${
                            isAvailable ? 'border-green-200 bg-green-50' : 'border-gray-200 bg-gray-50'
                          }`}
                        >
                          <div className="flex items-start justify-between">
                            <div className="flex-1">
                              <div className="flex items-center gap-2 mb-2">
                                <h3 className={`font-medium ${isAvailable ? 'text-green-900' : 'text-gray-700'}`}>
                                  {coupon.name}
                                </h3>
                                {coupon.autoGenerated && (
                                  <span className="px-2 py-1 bg-blue-100 text-blue-700 text-xs rounded">
                                    Earned
                                  </span>
                                )}
                                {!isAvailable && (
                                  <span className="px-2 py-1 bg-red-100 text-red-700 text-xs rounded">
                                    {isExpired ? 'Expired' : isUsedUp ? 'Used Up' : 'Inactive'}
                                  </span>
                                )}
                              </div>
                              
                              <div className="flex items-center gap-4 mb-2">
                                <div className={`flex items-center gap-2 ${isAvailable ? 'text-green-800' : 'text-gray-600'}`}>
                                  <code className="px-2 py-1 bg-white border rounded font-mono text-sm">
                                    {coupon.code}
                                  </code>
                                  <button
                                    onClick={() => copyToClipboard(coupon.code)}
                                    className="p-1 hover:bg-white hover:bg-opacity-50 rounded"
                                    disabled={!isAvailable}
                                  >
                                    {copiedCode === coupon.code ? (
                                      <CheckCircle className="w-4 h-4 text-green-600" />
                                    ) : (
                                      <Copy className="w-4 h-4" />
                                    )}
                                  </button>
                                </div>
                                
                                <div className={`text-sm font-medium ${isAvailable ? 'text-green-700' : 'text-gray-600'}`}>
                                  {coupon.discountType === 'percentage' 
                                    ? `${coupon.discountValue}% off`
                                    : `$${coupon.discountValue} off`
                                  }
                                  {coupon.minAmount && ` (min $${coupon.minAmount})`}
                                </div>
                              </div>
                              
                              {coupon.description && (
                                <p className={`text-sm ${isAvailable ? 'text-green-700' : 'text-gray-600'} mb-2`}>
                                  {coupon.description}
                                </p>
                              )}
                              
                              <div className={`text-xs ${isAvailable ? 'text-green-600' : 'text-gray-500'}`}>
                                Used {coupon.currentUses}/{coupon.maxUses || 'âˆž'} times
                                                                 {coupon.expiresAt && (
                                   <span className="ml-4">
                                     Expires: {new Date(coupon.expiresAt!).toLocaleDateString()}
                                   </span>
                                 )}
                              </div>
                            </div>
                          </div>
                        </div>
                      );
                    })}
                    
                    <div className="mt-6 p-4 bg-blue-50 border border-blue-200 rounded-lg">
                      <h4 className="font-medium text-blue-900 mb-2">ðŸ’¡ How to earn more coupons:</h4>
                      <ul className="text-sm text-blue-800 space-y-1">
                        <li>â€¢ Attend events and fill out feedback forms</li>
                        <li>â€¢ Participate in career events for special discounts</li>
                        <li>â€¢ Check back regularly for new coupon opportunities</li>
                      </ul>
                    </div>
                  </div>
                )}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
} 